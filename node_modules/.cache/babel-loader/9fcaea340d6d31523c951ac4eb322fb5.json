{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/Ryan/Desktop/CleanCode/SBU/LabInACube/ThreeJS/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost=Boolean(\n\twindow.location.hostname==='localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname==='[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n)\n\nexport function register(config)\n{\n\tif(process.env.NODE_ENV==='production' && 'serviceWorker' in navigator)\n\t{\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl=new URL(process.env.PUBLIC_URL, window.location.href)\n\t\tif(publicUrl.origin!==window.location.origin)\n\t\t{\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', ()=>\n\t\t{\n\t\t\tconst swUrl=`${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif(isLocalhost)\n\t\t\t{\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(()=>\n\t\t\t\t\t\t\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t\t\t\t\t\t\t   console.log(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   'This web app is being served cache-first by a service '+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t\t\t\t\t\t\t\t\t   )\n\t\t\t\t\t\t\t\t\t\t\t\t   })\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl, config)\n{\n\tnavigator.serviceWorker\n\t\t\t .register(swUrl)\n\t\t\t .then(registration=>\n\t\t\t\t   {\n\t\t\t\t\t   registration.onupdatefound=()=>\n\t\t\t\t\t   {\n\t\t\t\t\t\t   const installingWorker=registration.installing\n\t\t\t\t\t\t   if(installingWorker==null)\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t   return\n\t\t\t\t\t\t   }\n\t\t\t\t\t\t   installingWorker.onstatechange=()=>\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t   if(installingWorker.state==='installed')\n\t\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t\t   if(navigator.serviceWorker.controller)\n\t\t\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t\t\t   // At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t\t\t   // but the previous service worker will still serve the older\n\t\t\t\t\t\t\t\t\t   // content until all client tabs are closed.\n\t\t\t\t\t\t\t\t\t   console.log(\n\t\t\t\t\t\t\t\t\t\t   'New content is available and will be used when all '+\n\t\t\t\t\t\t\t\t\t\t   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t\t\t   )\n\n\t\t\t\t\t\t\t\t\t   // Execute callback\n\t\t\t\t\t\t\t\t\t   if(config && config.onUpdate)\n\t\t\t\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t\t\t\t   config.onUpdate(registration)\n\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t   else\n\t\t\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t\t\t   // At this point, everything has been precached.\n\t\t\t\t\t\t\t\t\t   // It's the perfect time to display a\n\t\t\t\t\t\t\t\t\t   // \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\t\t\t   console.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t\t\t   // Execute callback\n\t\t\t\t\t\t\t\t\t   if(config && config.onSuccess)\n\t\t\t\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t\t\t\t   config.onSuccess(registration)\n\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t   }\n\t\t\t\t\t   }\n\t\t\t\t   })\n\t\t\t .catch(error=>\n\t\t\t\t\t{\n\t\t\t\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t\t\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl, config)\n{\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response=>\n\t\t\t  {\n\t\t\t\t  // Ensure service worker exists, and that we really are getting a JS file.\n\t\t\t\t  const contentType=response.headers.get('content-type')\n\t\t\t\t  if(\n\t\t\t\t\t  response.status===404 ||\n\t\t\t\t\t  (contentType!=null && contentType.indexOf('javascript')=== -1)\n\t\t\t\t  )\n\t\t\t\t  {\n\t\t\t\t\t  // No service worker found. Probably a different app. Reload the page.\n\t\t\t\t\t  navigator.serviceWorker.ready.then(registration=>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t registration.unregister().then(()=>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t })\n\t\t\t\t  }\n\t\t\t\t  else\n\t\t\t\t  {\n\t\t\t\t\t  // Service worker found. Proceed as normal.\n\t\t\t\t\t  registerValidSW(swUrl, config)\n\t\t\t\t  }\n\t\t\t  })\n\t\t.catch(()=>\n\t\t\t   {\n\t\t\t\t   console.log(\n\t\t\t\t\t   'No internet connection found. App is running in offline mode.'\n\t\t\t\t   )\n\t\t\t   })\n}\n\nexport function unregister()\n{\n\tif('serviceWorker' in navigator)\n\t{\n\t\tnavigator.serviceWorker.ready.then(registration=>\n\t\t\t\t\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t\t\t\t\t   registration.unregister()\n\t\t\t\t\t\t\t\t\t\t   })\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}