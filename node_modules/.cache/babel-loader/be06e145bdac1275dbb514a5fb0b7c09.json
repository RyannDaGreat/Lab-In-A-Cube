{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Split from 'split.js';\n\nfunction objectWithoutProperties(obj, exclude) {\n  var target = {};\n\n  for (var k in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n  }\n\n  return target;\n}\n\nvar SplitWrapper =\n/*@__PURE__*/\nfunction (superclass) {\n  function SplitWrapper() {\n    superclass.apply(this, arguments);\n  }\n\n  if (superclass) SplitWrapper.__proto__ = superclass;\n  SplitWrapper.prototype = Object.create(superclass && superclass.prototype);\n  SplitWrapper.prototype.constructor = SplitWrapper;\n\n  SplitWrapper.prototype.componentDidMount = function componentDidMount() {\n    var ref = this.props;\n    var children = ref.children;\n    var gutter = ref.gutter;\n    var rest = objectWithoutProperties(ref, [\"children\", \"gutter\"]);\n    var options = rest;\n\n    options.gutter = function (index, direction) {\n      var gutterElement;\n\n      if (gutter) {\n        gutterElement = gutter(index, direction);\n      } else {\n        gutterElement = document.createElement('div');\n        gutterElement.className = \"gutter gutter-\" + direction;\n      } // eslint-disable-next-line no-underscore-dangle\n\n\n      gutterElement.__isSplitGutter = true;\n      return gutterElement;\n    };\n\n    this.split = Split(this.parent.children, options);\n  };\n\n  SplitWrapper.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var this$1 = this;\n    var ref = this.props;\n    var children = ref.children;\n    var minSize = ref.minSize;\n    var sizes = ref.sizes;\n    var collapsed = ref.collapsed;\n    var rest = objectWithoutProperties(ref, [\"children\", \"minSize\", \"sizes\", \"collapsed\"]);\n    var options = rest;\n    var prevMinSize = prevProps.minSize;\n    var prevSizes = prevProps.sizes;\n    var prevCollapsed = prevProps.collapsed;\n    var otherProps = ['expandToMin', 'gutterSize', 'gutterAlign', 'snapOffset', 'dragInterval', 'direction', 'cursor'];\n    var needsRecreate = otherProps // eslint-disable-next-line react/destructuring-assignment\n    .map(function (prop) {\n      return this$1.props[prop] !== prevProps[prop];\n    }).reduce(function (accum, same) {\n      return accum || same;\n    }, false); // Compare minSize when both are arrays, when one is an array and when neither is an array\n\n    if (Array.isArray(minSize) && Array.isArray(prevMinSize)) {\n      var minSizeChanged = false;\n      minSize.forEach(function (minSizeI, i) {\n        minSizeChanged = minSizeChanged || minSizeI !== prevMinSize[i];\n      });\n      needsRecreate = needsRecreate || minSizeChanged;\n    } else if (Array.isArray(minSize) || Array.isArray(prevMinSize)) {\n      needsRecreate = true;\n    } else {\n      needsRecreate = needsRecreate || minSize !== prevMinSize;\n    } // Destroy and re-create split if options changed\n\n\n    if (needsRecreate) {\n      options.minSize = minSize;\n      options.sizes = this.split.getSizes();\n      this.split.destroy(true, true);\n\n      options.gutter = function (index, direction, pairB) {\n        return pairB.previousSibling;\n      };\n\n      this.split = Split(Array.from(this.parent.children).filter( // eslint-disable-next-line no-underscore-dangle\n      function (element) {\n        return !element.__isSplitGutter;\n      }), options);\n    } else {\n      // If only the size has changed, set the size. No need to do this if re-created.\n      var sizeChanged = false;\n      sizes.forEach(function (sizeI, i) {\n        sizeChanged = sizeChanged || sizeI !== prevSizes[i];\n      });\n\n      if (sizeChanged) {\n        // eslint-disable-next-line react/destructuring-assignment\n        this.split.setSizes(this.props.sizes);\n      }\n    } // Collapse after re-created or when collapsed changed.\n\n\n    if (Number.isInteger(collapsed) && (collapsed !== prevCollapsed || needsRecreate)) {\n      this.split.collapse(collapsed);\n    }\n  };\n\n  SplitWrapper.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.split.destroy();\n    delete this.split;\n  };\n\n  SplitWrapper.prototype.render = function render() {\n    var this$1 = this;\n    var ref = this.props;\n    var sizes = ref.sizes;\n    var minSize = ref.minSize;\n    var expandToMin = ref.expandToMin;\n    var gutterSize = ref.gutterSize;\n    var gutterAlign = ref.gutterAlign;\n    var snapOffset = ref.snapOffset;\n    var dragInterval = ref.dragInterval;\n    var direction = ref.direction;\n    var cursor = ref.cursor;\n    var gutter = ref.gutter;\n    var elementStyle = ref.elementStyle;\n    var gutterStyle = ref.gutterStyle;\n    var onDrag = ref.onDrag;\n    var onDragStart = ref.onDragStart;\n    var onDragEnd = ref.onDragEnd;\n    var collapsed = ref.collapsed;\n    var children = ref.children;\n    var rest$1 = objectWithoutProperties(ref, [\"sizes\", \"minSize\", \"expandToMin\", \"gutterSize\", \"gutterAlign\", \"snapOffset\", \"dragInterval\", \"direction\", \"cursor\", \"gutter\", \"elementStyle\", \"gutterStyle\", \"onDrag\", \"onDragStart\", \"onDragEnd\", \"collapsed\", \"children\"]);\n    var rest = rest$1;\n    return React.createElement('div', Object.assign({}, {\n      ref: function ref(parent) {\n        this$1.parent = parent;\n      }\n    }, rest), children);\n  };\n\n  return SplitWrapper;\n}(React.Component);\n\nSplitWrapper.propTypes = {\n  sizes: PropTypes.arrayOf(PropTypes.number),\n  minSize: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  expandToMin: PropTypes.bool,\n  gutterSize: PropTypes.number,\n  gutterAlign: PropTypes.string,\n  snapOffset: PropTypes.number,\n  dragInterval: PropTypes.number,\n  direction: PropTypes.string,\n  cursor: PropTypes.string,\n  gutter: PropTypes.func,\n  elementStyle: PropTypes.func,\n  gutterStyle: PropTypes.func,\n  onDrag: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  collapsed: PropTypes.bool,\n  children: PropTypes.arrayOf(PropTypes.element)\n};\nSplitWrapper.defaultProps = {\n  sizes: undefined,\n  minSize: undefined,\n  expandToMin: undefined,\n  gutterSize: undefined,\n  gutterAlign: undefined,\n  snapOffset: undefined,\n  dragInterval: undefined,\n  direction: undefined,\n  cursor: undefined,\n  gutter: undefined,\n  elementStyle: undefined,\n  gutterStyle: undefined,\n  onDrag: undefined,\n  onDragStart: undefined,\n  onDragEnd: undefined,\n  collapsed: undefined,\n  children: undefined\n};\nexport default SplitWrapper;","map":null,"metadata":{},"sourceType":"module"}