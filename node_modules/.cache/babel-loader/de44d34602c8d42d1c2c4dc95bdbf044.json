{"ast":null,"code":"var _jsxFileName = \"/Users/Ryan/Desktop/CleanCode/SBU/LabInACube/Lab-In-A-Cube/src/index.js\";\n// import AddIcon from '@material-ui/icons/Add'\n// import Button from '@material-ui/core/Button'\n// import DeleteIcon from '@material-ui/icons/Delete'\n// import Fab from '@material-ui/core/Fab'\n// import IconButton from '@material-ui/core/IconButton'\n// import NavigationIcon from '@material-ui/icons/Navigation'\n// import PropTypes from 'prop-types'\n// import React from 'react'\n// import ReactDOM from 'react-dom'\n// import Split from 'react-split'\n// import {useState} from 'react'\n// import {withStyles} from '@material-ui/core/styles'\n// import Select from '@material-ui/core/Select';\n//\n// function LeafModifier({path})\n// {\n//\n// }\n//\n// let oldStuff=undefined\n// function GetSimpleGui()\n// {\n// \tconst labels               =[]\n// \tlet [instance, setInstance]=useState({})\n// \ttimerEvents[0]             =()=>\n// \t{\n// \t\tlet stuff=window.gameWindow.getGuiArchitectureInstance.apply(window.gameWindow, [window.gameWindow.config])\n// \t\tif(stuff!==oldStuff)\n// \t\t{\n// \t\t\tsetInstance(stuff)\n// \t\t\toldStuff=stuff\n// \t\t}\n// \t}//This function is inefficient. It must be cleaned up asap. (it lists all possible controls...which is just STUPID (but also very easy to make))\n//\n// \tfor(const [index, i] of Object.entries(instance))\n// \t{\n// \t\tif(i.path.includes('color'))\n// \t\t{\n// \t\t\tlet onClick=function()\n// \t\t\t{\n// \t\t\t\tconst value=prompt(\"Enter the new value for \"+(i.path.join(' '))+\n// \t\t\t\t\t\t\t\t\t   '\\n\\n at delta '+(i.delta)+'\\n\\nCurrent Value: '+i.valueInConfig)\n// \t\t\t\tif(value==null)\n// \t\t\t\t\treturn//Canceled\n// \t\t\t\telse\n// \t\t\t\t{\n// \t\t\t\t\tlet configString=localStorage.getItem('config')\n// \t\t\t\t\tconfigString+='\\n'+'deltas\t'+i.delta+'\t'+i.path.join('\t')+' '+value\n// \t\t\t\t\twindow.gameWindow.setConfigDjsonInLocalStorage(configString)\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tlet color  =i.valueInConfig===undefined ? \"primary\" : \"secondary\"\n// \t\t\tlabels.push(<Button key={index}\n// \t\t\t\t\t\t\t\tvariant=\"contained\" onClick={onClick}\n// \t\t\t\t\t\t\t\tsize=\"small\"\n// \t\t\t\t\t\t\t\tcolor={color}>\n// \t\t\t\t{'deltas '+i.delta+' '+i.path.join(' ')}\n// \t\t\t</Button>)\n// \t\t}\n// \t}\n// \treturn <table style={{flexGrow: 4, display: 'flex', flexDirection: 'column'}}>\n// \t\t{labels}\n// \t</table>\n// }\n//\n// window.gameWindow   =undefined//Will be set to the 'window' element of the 'game.html' iframe\n// const timerEvents=[()=>{}]//Calls each one of these on a timer\n// function doTimerEvents()\n// {\n// \tif(window.gameWindow!==undefined)//We're not ready yet: the game iframe has to finish loading first\n// \t{\n// \t\tconsole.log(\"HO\")\n// \t\twindow.gameWindow.editorMode=true\n// \t\tfor(const event of timerEvents)\n// \t\t\tevent()\n// \t}\n// }\n// setInterval(doTimerEvents, 100)\n//\n// function App()\n// {\n// \tfunction setGameWindow(x)\n// \t{\n// \t\t// let w            =x.contentWindow\n// \t\twindow.gameWindow=x.contentWindow\n// \t}\n// \tlet gameStyle={width: '100%', height: '100%', border: '0'}\n// \t// noinspection HtmlUnknownTarget\n// \treturn <Split style={{display: 'flex', flexDirection: 'horizontal', width: '100%', height: '100%'}}>\n// \t\t<div style={{border:10,backgroundColor:'rgba(255,255,255,.1)', flexGrow: 4, display: 'flex', flexDirection: 'column', overflowY: 'scroll',pointerEvents:'auto'}}>\n// \t\t\t<h1 style={{color: 'white'}}>Config</h1>\n// \t\t\t<Button style={{pointerEvents:'auto'}}variant=\"contained\" size=\"small\" color=\"primary\"> Undo </Button>\n// \t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\"> Redo </Button>\n// \t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\"> Add Item </Button>\n// \t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\"> Add Delta </Button>\n// \t\t\t<Select/>\n// \t\t\t<GetSimpleGui/>\n// \t\t</div>\n// \t\t<div></div>\n// \t\t<div></div>\n// \t\t<div></div>\n// \t</Split>\n// }\n// document.addEventListener(\"DOMContentLoaded\", function(event)\n// {\n// \tReactDOM.render(<div><App/></div>, document.getElementById('root'))\n// \t// Your code to run since DOM is loaded and ready\n// })\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nconst level1Panels = [{\n  key: 'panel-1a',\n  title: 'Level 1A',\n  content: 'Level 1A Contents'\n}, {\n  key: 'panel-ba',\n  title: 'Level 1B',\n  content: 'Level 1B Contents'\n}];\nconst Level1Content = React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 118\n  },\n  __self: this\n}, \"Welcome to level 1\", React.createElement(Accordion.Accordion, {\n  panels: level1Panels,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 120\n  },\n  __self: this\n}));\nconst level2Panels = [{\n  key: 'panel-2a',\n  title: 'Level 2A',\n  content: 'Level 2A Contents'\n}, {\n  key: 'panel-2b',\n  title: 'Level 2B',\n  content: 'Level 2B Contents'\n}];\nconst Level2Content = React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 130\n  },\n  __self: this\n}, \"Welcome to level 2\", React.createElement(Accordion.Accordion, {\n  panels: level2Panels,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 132\n  },\n  __self: this\n}));\nconst rootPanels = [{\n  key: 'panel-1',\n  title: 'Level 1',\n  content: {\n    content: Level1Content\n  }\n}, {\n  key: 'panel-2',\n  title: 'Level 2',\n  content: {\n    content: Level2Content\n  }\n}];\n\nconst AccordionExampleNested = () => React.createElement(Accordion, {\n  defaultActiveIndex: 0,\n  panels: rootPanels,\n  styled: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 141\n  },\n  __self: this\n});\n\nexport default AccordionExampleNested;","map":{"version":3,"sources":["/Users/Ryan/Desktop/CleanCode/SBU/LabInACube/Lab-In-A-Cube/src/index.js"],"names":["React","Accordion","level1Panels","key","title","content","Level1Content","level2Panels","Level2Content","rootPanels","AccordionExampleNested"],"mappingskB,OAAlB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,MAAMC,YAAY,GAAG,CACpB;AAAEC,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,KAAK,EAAE,UAA1B;AAAsCC,EAAAA,OAAO,EAAE;AAA/C,CADoB,EAEpB;AAAEF,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,KAAK,EAAE,UAA1B;AAAsCC,EAAAA,OAAO,EAAE;AAA/C,CAFoB,CAArB;AAKA,MAAMC,aAAa,GAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEC,oBAAC,SAAD,CAAW,SAAX;AAAqB,EAAA,MAAM,EAAEJ,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFD,CADD;AAOA,MAAMK,YAAY,GAAG,CACpB;AAAEJ,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,KAAK,EAAE,UAA1B;AAAsCC,EAAAA,OAAO,EAAE;AAA/C,CADoB,EAEpB;AAAEF,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,KAAK,EAAE,UAA1B;AAAsCC,EAAAA,OAAO,EAAE;AAA/C,CAFoB,CAArB;AAKA,MAAMG,aAAa,GAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEC,oBAAC,SAAD,CAAW,SAAX;AAAqB,EAAA,MAAM,EAAED,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFD,CADD;AAOA,MAAME,UAAU,GAAG,CAClB;AAAEN,EAAAA,GAAG,EAAE,SAAP;AAAkBC,EAAAA,KAAK,EAAE,SAAzB;AAAoCC,EAAAA,OAAO,EAAE;AAAEA,IAAAA,OAAO,EAAEC;AAAX;AAA7C,CADkB,EAElB;AAAEH,EAAAA,GAAG,EAAE,SAAP;AAAkBC,EAAAA,KAAK,EAAE,SAAzB;AAAoCC,EAAAA,OAAO,EAAE;AAAEA,IAAAA,OAAO,EAAEG;AAAX;AAA7C,CAFkB,CAAnB;;AAKA,MAAME,sBAAsB,GAAG,MAAM,oBAAC,SAAD;AAAW,EAAA,kBAAkB,EAAE,CAA/B;AAAkC,EAAA,MAAM,EAAED,UAA1C;AAAsD,EAAA,MAAM,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAArC;;AAEA,eAAeC,sBAAf","sourcesContent":["// import AddIcon from '@material-ui/icons/Add'\n// import Button from '@material-ui/core/Button'\n// import DeleteIcon from '@material-ui/icons/Delete'\n// import Fab from '@material-ui/core/Fab'\n// import IconButton from '@material-ui/core/IconButton'\n// import NavigationIcon from '@material-ui/icons/Navigation'\n// import PropTypes from 'prop-types'\n// import React from 'react'\n// import ReactDOM from 'react-dom'\n// import Split from 'react-split'\n// import {useState} from 'react'\n// import {withStyles} from '@material-ui/core/styles'\n// import Select from '@material-ui/core/Select';\n//\n// function LeafModifier({path})\n// {\n//\n// }\n//\n// let oldStuff=undefined\n// function GetSimpleGui()\n// {\n// \tconst labels               =[]\n// \tlet [instance, setInstance]=useState({})\n// \ttimerEvents[0]             =()=>\n// \t{\n// \t\tlet stuff=window.gameWindow.getGuiArchitectureInstance.apply(window.gameWindow, [window.gameWindow.config])\n// \t\tif(stuff!==oldStuff)\n// \t\t{\n// \t\t\tsetInstance(stuff)\n// \t\t\toldStuff=stuff\n// \t\t}\n// \t}//This function is inefficient. It must be cleaned up asap. (it lists all possible controls...which is just STUPID (but also very easy to make))\n//\n// \tfor(const [index, i] of Object.entries(instance))\n// \t{\n// \t\tif(i.path.includes('color'))\n// \t\t{\n// \t\t\tlet onClick=function()\n// \t\t\t{\n// \t\t\t\tconst value=prompt(\"Enter the new value for \"+(i.path.join(' '))+\n// \t\t\t\t\t\t\t\t\t   '\\n\\n at delta '+(i.delta)+'\\n\\nCurrent Value: '+i.valueInConfig)\n// \t\t\t\tif(value==null)\n// \t\t\t\t\treturn//Canceled\n// \t\t\t\telse\n// \t\t\t\t{\n// \t\t\t\t\tlet configString=localStorage.getItem('config')\n// \t\t\t\t\tconfigString+='\\n'+'deltas\t'+i.delta+'\t'+i.path.join('\t')+' '+value\n// \t\t\t\t\twindow.gameWindow.setConfigDjsonInLocalStorage(configString)\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tlet color  =i.valueInConfig===undefined ? \"primary\" : \"secondary\"\n// \t\t\tlabels.push(<Button key={index}\n// \t\t\t\t\t\t\t\tvariant=\"contained\" onClick={onClick}\n// \t\t\t\t\t\t\t\tsize=\"small\"\n// \t\t\t\t\t\t\t\tcolor={color}>\n// \t\t\t\t{'deltas '+i.delta+' '+i.path.join(' ')}\n// \t\t\t</Button>)\n// \t\t}\n// \t}\n// \treturn <table style={{flexGrow: 4, display: 'flex', flexDirection: 'column'}}>\n// \t\t{labels}\n// \t</table>\n// }\n//\n// window.gameWindow   =undefined//Will be set to the 'window' element of the 'game.html' iframe\n// const timerEvents=[()=>{}]//Calls each one of these on a timer\n// function doTimerEvents()\n// {\n// \tif(window.gameWindow!==undefined)//We're not ready yet: the game iframe has to finish loading first\n// \t{\n// \t\tconsole.log(\"HO\")\n// \t\twindow.gameWindow.editorMode=true\n// \t\tfor(const event of timerEvents)\n// \t\t\tevent()\n// \t}\n// }\n// setInterval(doTimerEvents, 100)\n//\n// function App()\n// {\n// \tfunction setGameWindow(x)\n// \t{\n// \t\t// let w            =x.contentWindow\n// \t\twindow.gameWindow=x.contentWindow\n// \t}\n// \tlet gameStyle={width: '100%', height: '100%', border: '0'}\n// \t// noinspection HtmlUnknownTarget\n// \treturn <Split style={{display: 'flex', flexDirection: 'horizontal', width: '100%', height: '100%'}}>\n// \t\t<div style={{border:10,backgroundColor:'rgba(255,255,255,.1)', flexGrow: 4, display: 'flex', flexDirection: 'column', overflowY: 'scroll',pointerEvents:'auto'}}>\n// \t\t\t<h1 style={{color: 'white'}}>Config</h1>\n// \t\t\t<Button style={{pointerEvents:'auto'}}variant=\"contained\" size=\"small\" color=\"primary\"> Undo </Button>\n// \t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\"> Redo </Button>\n// \t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\"> Add Item </Button>\n// \t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\"> Add Delta </Button>\n// \t\t\t<Select/>\n// \t\t\t<GetSimpleGui/>\n// \t\t</div>\n// \t\t<div></div>\n// \t\t<div></div>\n// \t\t<div></div>\n// \t</Split>\n// }\n// document.addEventListener(\"DOMContentLoaded\", function(event)\n// {\n// \tReactDOM.render(<div><App/></div>, document.getElementById('root'))\n// \t// Your code to run since DOM is loaded and ready\n// })\nimport React from 'react'\nimport { Accordion } from 'semantic-ui-react'\n\nconst level1Panels = [\n\t{ key: 'panel-1a', title: 'Level 1A', content: 'Level 1A Contents' },\n\t{ key: 'panel-ba', title: 'Level 1B', content: 'Level 1B Contents' },\n]\n\nconst Level1Content = (\n\t<div>\n\t\tWelcome to level 1\n\t\t<Accordion.Accordion panels={level1Panels} />\n\t</div>\n)\n\nconst level2Panels = [\n\t{ key: 'panel-2a', title: 'Level 2A', content: 'Level 2A Contents' },\n\t{ key: 'panel-2b', title: 'Level 2B', content: 'Level 2B Contents' },\n]\n\nconst Level2Content = (\n\t<div>\n\t\tWelcome to level 2\n\t\t<Accordion.Accordion panels={level2Panels} />\n\t</div>\n)\n\nconst rootPanels = [\n\t{ key: 'panel-1', title: 'Level 1', content: { content: Level1Content } },\n\t{ key: 'panel-2', title: 'Level 2', content: { content: Level2Content } },\n]\n\nconst AccordionExampleNested = () => <Accordion defaultActiveIndex={0} panels={rootPanels} styled />\n\nexport default AccordionExampleNested\n"]},"metadata":{},"sourceType":"module"}