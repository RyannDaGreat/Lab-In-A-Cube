Notes:
	*In general, my function names work like this: If it's a verb, it probably mutates something (which is more efficient generally). Examples: copy, apply. Else, it probably is a pure function that returns something Example: copied, blended etc. If it's 
	*Javascript is REALLY annoying. It doesn't even check to make sure I gave functions the right number of arguments. I have been trying to mitigate mysterious 'undefined' errors that I spent hours debugging just to find out I forgot to put an assertion like "console.assert(arguments.length===2,'Wrong number of arguments.')" into one of my functions. Keep this in mind. (IDE's can help with this somewhat with autocompletion though)
	*In the djson, 'deltas' in transitions are space-separated strings of (possibly multiple) deltas composed together. this will also be how the state's delta stack will be represented. This is beautiful because of the djson rule that prohibits any whitespace in key names, but allows it in value names. (AKA no deltaID's can possibly have spaces or tabs in them. We also assume that no deltaID's have empty strings, but I haven't acually added a check for that as of March25/2019)
	*Inheritance of deltas is a thing. One delta can inherit from multiple others, but these others have to have some defined order to them (because order matters). Circular inheritance SHOULD be possible, because of the finite nature of deltas. But right now, as of March25/2019, this will cause an infinite loop (which should later be fixed).
	*A composition of deltas is one applied after the other to create new deltas (they're associative)
	*Delta inheritance chains: Important conjecture: Any compotision of deltas of length N, chosen from a set of P possible deltas, can be represented as a composition of deltas with length less than P. (For example, take composition ABA which is equal to BA. Only the last one of each matters). This is important in understanding the function getDeltaInheritanceChain
	*The LAST delta in an inheritance chain always gets applied last, so it's never overwritten etc...this might seem slightly counterintuitive at first, but it's actually not.
	*'Comments' can be made in djson, just line any other language (except that these 'comments' actually affect the data. It's just that in practice, my program won't actually read them. You can use '//' as a key, then any non-tabbed single line comment after it.)
	*I added mouse-over transitions. I would reccomend never setting the time too high on them though, because async transitions aren't a thing right now.
	*In JSON's, .3 is an invalid number. In DJSON, it is. (Also, -.5 is invalid JSON but valid DJSON)

RESERVED:
	Deltas:
		initial
		on_exit


DELTAS CONTAIN:
	INHERITANCE
	SIMPLE CONDITIONS: two arguments: a deltaID, and an (optional) deltaID. If the first one is contained within current state, then: if there's a second argument, return that deltaID instead. Else, just return an empty delta {} (without doing any inheritance). NOTE: we must keep track of branches that failed, because if we bounce back and fourth between a few deltas that have failed we would like to return {} instead. This handles the case of a possible loop between deltas A and B, where A is told to go to B and B is told to go to A because of some impossible-to-meet condition. 
	These are metadata for when the condition is evaluated.
	BUT WAIT: WOULD CONDITIONS MESS UP PROPERTIES OF DELTAS, AND IF SO WOULD IT MATTER??




TODO

Error Messages:
	- When a geometry fails to load


2D GUI
Flask Liquid
Conditions

Texture Loading
Add sounds
Add optional smoothing 
Add sky/better lighting
Add beakers with variable fluid levels
Add GUI
Make editor NOT dissapear when we zoom in too much (why does it do that??)
Toggle Visibility -- objects that aren't visible should let raytracing pass through
Make a stack of deltas so we can edit in realtime for real
Make macros
Persistent Undo in editor
Let camera move around
Add .. to djson	(and deltas to djson's without reformatting) (and better djson formatting)



*** WHY THE HELL DOES THIS BREAK ON SAFARI AND FIREFOX BUT WORK ON CHROME?!?!? Answer: There was no localstorage config there.

